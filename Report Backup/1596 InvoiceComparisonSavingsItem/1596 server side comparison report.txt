Imports kWGlobalFunctions.kWGlobalsShared
Imports kWHTML
Imports kWHTML.Elements
Imports WebManagement
Imports kWHTML.kWForms

Namespace kWatchServer.repReportItems
    ''' <summary>"
    ''' Define all custom code for this assembly within this class 
    ''' </summary>
    ''' <remarks></remarks>
    Public Class WEB_repInvoiceComparisonSavingsItem
        Implements WebForm

        Public prvIsReady
        Public prvIsNotReadyReasons
        Public CSSInclude


        ' ''' <summary>
        ' ''' Example - This can be used as a report property - note the <reportProperty>  attribute that has been applied
        ' ''' </summary>
        ' ''' <value></value>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        '<reportProperty>
        'Public Property SiteID As Integer


        ''' <summary>
        ''' Main function that is returned to the lines of the report when it is ran
        ''' </summary>
        ''' <param name="html"></param>
        ''' <remarks></remarks>
        Public Sub GetReport(html As HTMLTextWriterkWatch) Implements WebForm.GetReport
            Dim repBase = GetReportBase()
            repBase.ToString(html)
        End Sub


        Public Function GetReportBase() As HTMLkWFormBase Implements WebForm.GetReportBase
            Dim Form = HTMLkWFormBase.Create(Me)
            Form.onLoadFormBase = "onLoadFormBase1596"  'make sure this matches the onLoadFormBase name
            Form.JScript.Add(My.Resources.ClientScript)
            Form.IncludeHeader = False
            Form.FormSectionMain.Add(PricingComparision())
            Return Form

        End Function

        Public Function ComparisonSummary() As HTMLElementDIV
            Dim ComparisionSummaryTable As New HTMLElementDIV
            Dim Count1
            Dim Comp
            Dim CompStr
            Dim TotalDiff
            Dim Prc
            Dim Count2
            Dim prcCount

            CompStr = ""
            TotalDiff = Me.ComparisonSET.Difference

            For Count1 = 1 To Me.ComparisonSET.ComparisonSeriesSETCount
                Comp = Me.ComparisonSET.ComparisonSeriesSET(Count1)
                CompStr = CompStr & " " & Comp.Description

                prcCount = Comp.PricingStructuresSETCount
                For Count2 = 1 To prcCount
                    Prc = Comp.PricingStructureSETItem(Count2)

                    'ComparisionReport(Prc)

                    Dim TargetReport As defRun_Report_Definition = Prc.Reports_Definitions.Item_By_Name("WEB_SitePricingSummary").ClassObject
                    Dim Web = SettingsManagement.GetRunReport(TargetReport, Me)
                    CObj(Web).CSSInclude = False
                    CObj(Web).ReportOnErrors = False
                    CObj(Web).PromptForDates = True
                    CObj(Web).startDate = DateSerial(2017, 10, 1)
                    CObj(Web).endDate = DateSerial(2017, 10, 31).Add(New TimeSpan(23, 59, 59))
                    CObj(Web).siteLongID = "6~4596"

                    ComparisionSummaryTable.Controls.Add((Web.GetReportBase))

                Next
                If prcCount > 1 Then
                    'Here we should add a sub total to this point
                    CompStr = CompStr & "TOTAL = " & FormatCurrency(Comp.TotalCharges)
                    ComparisionSummaryTable.Controls.Add(CompStr)
                End If
            Next

            Return ComparisionSummaryTable
        End Function
        Public Function PricingComparision() As HTMLElementDIV
            Dim ComparisionTable As New HTMLElementDIV

            Dim TotalDiff = Me.ComparisonSET.Difference
            'NO CARRIED FORWARD
            If Me.SavingLossesHistoryValue = 0 And TotalDiff >= 0 And Me.ReportDesign.IsInvoice Then
                Dim HeadTitle As String = "Item " & Me.Invoice_Item_ID & " " & Me.EvaluateItemName

                Dim TitleHeading = New HTMLElementH4(HeadTitle)
                ComparisionTable.Controls.Add(TitleHeading)

                Dim SharingDesc = New HTMLElementH4(Me.EvaluateItemDescription.ToString)
                ComparisionTable.Controls.Add(SharingDesc)

                Dim Descriptioin = New HTMLElementH4("Utilacor started sharing In this saving at a rate of " & FormatPercent(Me.ReportDesignItem.PercentageSharing, 0) & " on the " & Format(Me.ReportDesignItem.SDate, "dd-MMM-yyyy") & ".  The sharing In 
                savings will continue for another " & DateDiff("m", Me.EndDate, Me.ReportDesignItem.EDate) & " months")
                ComparisionTable.Controls.Add(Descriptioin)

                ComparisionTable.Controls.Add(ComparisonSummary())
                Dim TotalSaving = New HTMLElementH4("<b>Total Saving</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                     &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    &nbsp;" & FormatCurrency(TotalDiff))
                ComparisionTable.Controls.Add(TotalSaving)
                Dim SavingToDate = New HTMLElementH4("<b>Total Amount Due " & Format(Me.ReportDesignItem.PercentageSharing, "Percent") & " of 
                                                        " & FormatCurrency(Me.SavingsToDate) & " (Ex GST) </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.EvaluateChargeExpression))
                ComparisionTable.Controls.Add(SavingToDate)

                Dim GSTInTotal = New HTMLElementH4("<b>GST In Total </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.EvaluateChargeExpression * GSTRate()))
                ComparisionTable.Controls.Add(GSTInTotal)

                Dim Total = New HTMLElementH4("<b>Total </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.EvaluateChargeExpression * (1 + GSTRate())))
                ComparisionTable.Controls.Add(Total)
                'Carried Forward Losses
            ElseIf (Me.SavingLossesHistoryValue <> 0 Or TotalDiff < 0) And Me.ReportDesign.IsInvoice Then 'CARRIED FORWARD
                Dim HeadTitle As String = "Item " & Me.Invoice_Item_ID & " " & Me.EvaluateItemName

                Dim TitleHeading = New HTMLElementH4(HeadTitle)
                ComparisionTable.Controls.Add(TitleHeading)
                Dim SharingDesc = New HTMLElementH4(Me.EvaluateItemDescription.ToString)
                ComparisionTable.Controls.Add(SharingDesc)

                Dim Descriptioin = New HTMLElementH4("Utilacor started sharing in this saving at a rate of" & FormatPercent(Me.ReportDesignItem.PercentageSharing, 0) & " on the" & Format(Me.ReportDesignItem.SDate, "dd-mmm-yyyy") & ".  The sharing in 
			savings will continue for another " & DateDiff("m", Me.EndDate, Me.ReportDesignItem.EDate) & " months.")
                ComparisionTable.Controls.Add(Descriptioin)

                ComparisionTable.Controls.Add(ComparisonSummary())



                Dim TotalSaving = New HTMLElementH4("<b>Total Saving  </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(TotalDiff))
                ComparisionTable.Controls.Add(TotalSaving)



                Dim LossesCarriedForward = New HTMLElementH4("<b>Losses Carried Forward</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.SavingLossesHistoryValue))
                ComparisionTable.Controls.Add(LossesCarriedForward)


                Dim TotalSavingCf = New HTMLElementH4("<b>Total Saving To Date </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.SavingsToDate))
                ComparisionTable.Controls.Add(TotalSavingCf)

                If Me.SavingsToDate > 0 Then
                    Dim SavingToDate = New HTMLElementH4("<b>Total Amount Due " & Format(Me.ReportDesignItem.PercentageSharing, "Percent") & " of 
                                                        " & FormatCurrency(Me.SavingsToDate) & " (Ex GST) </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.EvaluateChargeExpression))
                    ComparisionTable.Controls.Add(SavingToDate)

                    Dim GSTInTotal = New HTMLElementH4("<b>GST In Total </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.EvaluateChargeExpression * GSTRate()))
                    ComparisionTable.Controls.Add(GSTInTotal)

                    Dim Total = New HTMLElementH4("<b>Total </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(Me.EvaluateChargeExpression * (1 + GSTRate())))
                    ComparisionTable.Controls.Add(Total)

                Else

                    Dim Total = New HTMLElementH4("<b>Total Amount Due = $0 due to negative carried forward saving </b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(0))
                    ComparisionTable.Controls.Add(Total)

                End If

            Else Me.ReportDesign.IsInvoice = False
                Dim HeadTitle As String = Me.EvaluateItemName
                Dim TitleHeading = New HTMLElementH4(HeadTitle)
                ComparisionTable.Controls.Add(TitleHeading)

                ComparisionTable.Controls.Add(New HTMLText(Me.EvaluateItemDescription.ToString))
                ComparisionTable.Controls.Add(New HTMLText("</BR>This saving was identified On the  " & Format(Me.ReportDesignItem.SDate, "dd-MMM-yyyy") & ""))
                ComparisionTable.Controls.Add(ComparisonSummary())
                Dim Total = New HTMLElementH4("<b>Total Saving =  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                          &nbsp;" & FormatCurrency(TotalDiff))
                ComparisionTable.Controls.Add(Total)
            End If
            Return ComparisionTable
        End Function


        Public Function GSTRate()
            If Not Me.Invoice_Item Is Nothing Then
                GSTRate = Me.Invoice_Item.GST_Rate
            Else
                GSTRate = 0.1
            End If

        End Function

        Public Function IsReady()

            If IsNothing(prvIsReady) Then
                IsNotReadyReasons()
            End If
            IsReady = prvIsReady

        End Function

        Public Function CheckInvoiceIsNotReadyReasons()
            Dim prvIsNotReadyReasons
            prvIsNotReadyReasons = CreateObject("kWatchServer.isrNotReadyStates")
            'The first check that we need here is to make sure that all generated report Items match the report item amounts as in kWatch, it they do not we need to generate an error
            'for a PG invoice this is different to a Utilacor invoice as this changes a little due to the ReportItem to many Invoice Items relationship that we have.


            'This is called by the HTML_invInvoice or HTML_invInvoicePG reports and it will be up to this function to return true if the Report item still matches the invoice items for this report object.
            'If this does not match any longer (likely becuase the system has changed after the invoice items were created) then this will return false and it will ensure that the invoice does not get produced 
            'incorrectly

            If Not Me.Invoice_Item Is Nothing Then
                If Math.Abs(Me.Invoice_Item.AmountExGST - Me.InvoiceCharge) >= 0.02 Then
                    prvIsNotReadyReasons.Add(Me.LongID, 200, "The invoice item has changes in the amount since the invoice was produced, please re-produce the invoice items and try again - Invoice Amount is " & FormatCurrency(Me.Invoice_Item.AmountExGST) & " ex gst and " & FormatCurrency(Me.InvoiceCharge) & " ex gst", Me.User)
                End If
            Else
                prvIsNotReadyReasons.Add(Me.LongID, 200, "There is no invoice item to check the invoice amounts for", Me.User)
            End If

            'Set CheckInvoiceIsNotReadyReasons = prvIsNotReadyReasons
            Return prvIsNotReadyReasons

        End Function

        Public Function IsNotReadyReasons()
            Dim Count1
            Dim Comp
            Dim ErrReason
            Dim MissingIntervals
            Dim Reason
            Dim AddedErrMessage

            MissingIntervals = 4


            If IsNothing(prvIsNotReadyReasons) Then
                prvIsNotReadyReasons = CreateObject("kWatchServer.isrNotReadyStates")
            Else
                IsNotReadyReasons = prvIsNotReadyReasons
                Exit Function
            End If


            prvIsReady = True

            With Me.ReportDesignItem.Reports_Definitions.Item_By_Name("LOCALHTML_repReportDesignItem").ClassObject.CodeObject
                .SetDefaults
                prvIsReady = .IsReady
                If prvIsReady = False Then
                    For Each Reason In .IsNotReadyReasons
                        prvIsNotReadyReasons.AddObject(CObj(Reason))
                    Next
                End If
            End With


            If Not Me.ComparisonSET Is Nothing Then
                Me.ComparisonSET.Reset()
                If Me.ComparisonSET.ComparisonSeriesSETCount > 1 Then
                    'MsgBox "TESTING COMPARISON - Point 1"

                    'Here we must check out the primary comparison
                    For Count1 = 1 To Me.ComparisonSET.ComparisonSeriesSETCount
                        Comp = Me.ComparisonSET.ComparisonSeriesSET(Count1)
                        'We do not need to review the primary pricing - it has already been done
                        'MsgBox "TESTING COMPARISON - Point 2"

                        'At this time it is likly that the comparison will have problems due to the fact that it represents past charges
                        'For this reason we must actually look at the errors to ensure that none of the problems are criticle
                        If Not Comp.PricingStructureSET Is Nothing Then
                            Comp.PricingStructureSET.reset()
                            If Comp.PricingStructureSET.IsReady = False Then
                                'MsgBox "TESTING COMPARISON - Point 3 - We are FALSE " & Comp.PricingStructureSET.IsNotReadyReasons.Count & " ID = " & Comp.PricingStructureSET.ID

                                AddedErrMessage = False
                                For Each ErrReason In Comp.PricingStructureSET.IsNotReadyReasons
                                    'MsgBox ErrReason.Reason
                                    Select Case ErrReason.Problem
                                        Case 14 'prcNoteReadyState_DataMissingIntervals
                                            If Math.Abs(ErrReason.FurtherInformation) > MissingIntervals Then
                                                prvIsReady = False

                                                If AddedErrMessage = False Then
                                                    AddedErrMessage = True
                                                    prvIsNotReadyReasons.Add(Comp.PricingStructureSET.LongID, 200, "The Pricing " & Comp.PricingStructureSET.Name & " Used in the comparison " & Comp.Name & " has the following problems", Me.User)
                                                End If


                                                prvIsNotReadyReasons.AddObject(CObj(ErrReason))
                                            End If
                                        Case Else
                                            prvIsReady = False

                                            If AddedErrMessage = False Then
                                                AddedErrMessage = True
                                                prvIsNotReadyReasons.Add(Comp.PricingStructureSET.LongID, 200, "The Pricing " & Comp.PricingStructureSET.Name & " Used in the comparison " & Comp.Name & " has the following problems", Me.User)
                                            End If

                                            prvIsNotReadyReasons.AddObject(CObj(ErrReason))

                                    End Select
                                Next
                            End If
                        Else
                            prvIsNotReadyReasons.Add(Comp.LongID, 200, "The Pricing Used in the comparison " & Comp.Name & " has an invalid entry - please review the comparison", Me.User)

                        End If
                    Next
                End If
            End If

            Return prvIsNotReadyReasons
            'Set IsNotReadyReasons = prvIsNotReadyReasons


        End Function

        Private Function CheckDataStream(Stream, Desc, ErrStr)

            CheckDataStream = True
            If Stream Is Nothing Then
                CheckDataStream = False
                ErrStr = ErrStr & IIF(Len(ErrStr) > 0, vbCrLf, "") &
        "There is no Default " & Desc & " data Stream for the report " & Me.ID & " " & Me.ReportDesign.Description & " " & Me.Name
            Else
                'This Means that there is a Data Stream - We need to see if there is enough data for the period specified
                If Stream.SDate > Me.StartDate Or Stream.EDate < Me.EndDate Then
                    CheckDataStream = False
                    ErrStr = ErrStr & IIF(Len(ErrStr) > 0, vbCrLf, "") &
            "The Data Stream " & Stream.Name & " Does not contain enough data"
                End If
            End If


        End Function



        ''' <summary>
        ''' This is the function that is called when you need to refresh the form base object
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function RefreshFormBase() As String Implements WebForm.RefreshFormBase

            'Get the report
            Dim repBase As HTMLkWFormBase(Of WEB_repInvoiceComparisonSavingsItem) = GetReportBase()
            'This will exclude the jscript code and other items
            repBase.RefreshPageCall = True
            Dim html As New HTMLTextWriterkWatch
            repBase.ToString(html)
            'Return the string that contains the main contents of this report with extras
            Return html.ToString

        End Function

#Region "Default Code"

        <ThreadStatic()>
        Public Shared SharedMe As WEB_repInvoiceComparisonSavingsItem

        'Private _Entities As Entities
        '''' <summary>
        '''' This should only be used when updating properties, not in any other code - when you need the entities you should
        '''' create it yourself
        '''' </summary>
        '''' <value></value>
        '''' <returns></returns>
        '''' <remarks></remarks>
        'Public ReadOnly Property Entities As Entities
        '    Get
        '        If Not _Entities Is Nothing Then
        '            If _Entities.IsDisposed Then
        '                _Entities = Nothing
        '            End If
        '        End If
        '        If _Entities Is Nothing Then
        '            _Entities = New Entities(Me.User)
        '        End If

        '        Return _Entities
        '    End Get
        'End Property

        ''' <summary>
        ''' This can be used to associate an icon with this report that is different to the underlying report
        ''' You could set this within the SetDefaults, or you could create a get and set componet of the 
        ''' property and override it
        ''' </summary>
        ''' <returns></returns>
        Public Property ReportIcon As Icons Implements WebForm.ReportIcon

        ''' <summary>
        ''' Initialization code in here for this report.  This code will be called each time the report is ran
        ''' other call reports should also call this before using the report output or any contained functions
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub SetDefaults() Implements defReport_Definitions.defReportDefinitionBase.SetDefaults
            prvIsReady = String.Empty
            prvIsNotReadyReasons = String.Empty
            CSSInclude = False


            'Uncomment these lines if you have an entitites object
            'If Not _Entities Is Nothing Then
            '    _Entities.Dispose()
            '    _Entities = Nothing
            'End If

            SharedMe = Me
        End Sub

        ''' <summary>
        ''' This is a callback that is called after the report if produced.  The report is a document of type Word, Excel, Email or RTF
        ''' This depends on the type of report produced
        ''' </summary>
        ''' <param name="ReportObj">The Report object</param>
        ''' <remarks></remarks>
        Public Sub AfterReportProduce(ByVal ReportObj As Object) Implements defReport_Definitions.defReportDefinitionBase.AfterReportProduce
        End Sub

        ''' <summary>
        ''' The callback is called after the file has been saved to kWatch.  The file object is a referances to the filFile object that has 
        ''' just been saved
        ''' </summary>
        ''' <param name="File">The newly saved file</param>
        ''' <remarks></remarks>
        Public Sub AfterFileSave(ByVal File As kWatchServer.filFile) Implements defReport_Definitions.defReportDefinitionBase.AfterFileSave
        End Sub


        ''' <summary>
        ''' This is the web request object that has been passed back from the originating call. This contains
        ''' information relating to the browser, the call been made and the IIS server that the call came from.
        ''' This is a copy of the request object that is generated by the server 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property Request As UserRequest Implements WebForm.Request

        ''' <summary>
        ''' This is the WebSite that this request belongs to
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property Web As webWebSite Implements WebForm.Web

        ''' <summary>
        ''' This is the webContact that relatest to this request
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property WebContact As webContactLogin Implements WebForm.WebContact

#Region "Settings"

        ''' <summary>
        ''' This will return the settings object as a dynamic expando object that you can review and edit.  If you
        ''' want your settings object casted to a specific type, use the GetSettings function.  Setting an object
        ''' to this location will also update the settings object for you as well
        ''' 
        ''' This will get the settings object for this report object.  Settings objects are unique based on
        ''' the RunReportID, LoggedInContact (either web or local), The active WebID or web site, a DashboardwidgetID and
        ''' optionaly a SettingsLocationID that you might choose to use.
        ''' 
        ''' So for a kWatch report delivered within kWatch - this would be unique based on RunReportID and contactID only as
        ''' webID, DashboardwidgetID and SettinglocationID are all nothing
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property Settings As Object Implements WebForm.Settings
            Get
                Return WebManagement.SettingsManagement.GetSettings(Me) ' Newtonsoft.Json.JsonConvert.DeserializeObject(Of ExpandoObject)(Me.SettingsRecord.SettingsObject)
            End Get
            Set(value As Object)
                WebManagement.SettingsManagement.SaveSettings(value, Me)
            End Set
        End Property

        ''' <summary>
        ''' This will return the settings object as a dynamic expando object that you can review and edit.  If you
        ''' want your settings object casted to a specific type, use the GetSettings function.  Setting an object
        ''' to this location will also update the settings object for you as well
        ''' 
        ''' This will get the settings object for this report object.  Settings objects are unique based on
        ''' the RunReportID, LoggedInContact (either web or local), The active WebID or web site, a DashboardwidgetID and
        ''' optionaly a SettingsLocationID that you might choose to use.
        ''' 
        ''' So for a kWatch report delivered within kWatch - this would be unique based on RunReportID and contactID only as
        ''' webID, DashboardwidgetID and SettinglocationID are all nothing
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSettings(Of SettingObjectType)() As SettingObjectType Implements WebForm.GetSettings

            Return WebManagement.SettingsManagement.GetSettings(Of SettingObjectType)(Me)

        End Function

        ''' <summary>
        ''' This will save the settings object to the database
        ''' </summary>
        ''' <typeparam name="SettingObjectType"></typeparam>
        ''' <param name="Obj"></param>
        ''' <remarks></remarks>
        Public Sub SaveSettings(Of SettingObjectType)(Obj As SettingObjectType) Implements WebForm.SaveSettings

            WebManagement.SettingsManagement.SaveSettings(Obj, Me)

        End Sub

        ''' <summary>
        ''' This is a global property that if set - will be used as a reportProperties object by the dash-board component
        ''' You do not need to set this - and it is set if this report is used as 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <kWHTML.kWForms.reportProperty>
        Public Property DashboardWidgetID As Integer? Implements WebForm.DashboardWidgetID
        ''' <summary>
        ''' This will get the settings record for this report object.  Settings objects are created and unique based on
        ''' the RunReportID, LoggedInContact (either web or local), The active WebID or web site, a dash-board Widget ID and
        ''' optionaly a SettingsLocationID that you might choose to use.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SettingsRecord As defReportSetting Implements WebForm.SettingsRecord
            Get
                Return WebManagement.SettingsManagement.GetSettingsRecord(Me)
            End Get
        End Property


        ''' <summary>
        ''' This will return the guid that is used within the report object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property ReportPropertiesGuid As Guid Implements WebForm.ReportPropertiesGuid
            Get
                Return WebManagement.SettingsManagement.getReportPropertiesGuid(Me)
            End Get
        End Property

        ''' <summary>
        ''' This wil return the report properties object for this report
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property ReportProperties As Object Implements WebForm.ReportProperties
            Get
                Return WebManagement.SettingsManagement.GetReportProperties(Me)
            End Get
        End Property
#End Region




#End Region



    End Class
End NameSpace
