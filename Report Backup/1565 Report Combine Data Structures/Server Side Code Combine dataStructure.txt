Imports kWHTML.Elements
Imports WebManagement
Imports kWHTML.kWForms
Imports kWMeterEDMI
Imports kWHTML
Imports System.Text

Namespace kWatchServer.datCombinedStructures
    ''' <summary>"
    ''' Define all custom code for this assembly within this class 
    ''' </summary>
    ''' <remarks></remarks>
    Public Class WEBHTMLADD_kWItems
        Implements WebForm
        Public ItemReferance1 As Object
        Public Session1 As Object
        Public HasWindow

        ' ''' <summary>
        ' ''' Example - This can be used as a report property - note the <reportProperty>  attribute that has been applied
        ' ''' </summary>
        ' ''' <value></value>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        '<reportProperty>
        'Public Property SiteID As Integer


        ''' <summary>
        ''' Main function that is returned to the lines of the report when it is ran
        ''' </summary>
        ''' <param name="html"></param>
        ''' <remarks></remarks>
        Public Sub GetReport(html As HTMLTextWriterkWatch) Implements WebForm.GetReport
            Dim repBase = GetReportBase()
            repBase.ToString(html)
        End Sub
        Public Function ItemReferenceObject() As kWItem

            '************** This Do Not Work Here***************************
            'If Len(Me.SetUpObject.ClassObject.ItemReferanceIDs) > 0 Then

            '    Dim LongID = Me.SetUpObject.ClassObject.ItemReferanceIDs
            '    Return Me.User.Get_Item_Object(LongID).ClassObject
            'End If
            'Return Nothing


            If Len(Me.User.Company.LongID) > 0 Then

                Dim LongID = Me.User.Company.LongID
                Return Me.User.Get_Item_Object(LongID).ClassObject
            End If
            Return Nothing

        End Function


        Public Function GetReportBase() As HTMLkWFormBase Implements WebForm.GetReportBase

            'Create the form base object
            Dim Form = HTMLkWFormBase.Create(Me)
            Form.onLoadFormBase = "onLoadFormBase1565"  'make sure this matches the onLoadFormBase name

            If ItemReferenceObject() Is Nothing Then
                Form.FormSectionMain.Add(New HTMLText("Data Combined Structure Cannot Be Added From This Location"))
                Return Form
            End If

            Form.JScript.Add(My.Resources.ClientScript)
            Form.FormHeader.FormName = "Add Combined Data Structure"
            Form.ScriptFunctionCallCodeObjectAdd(Function(c) c.AddItem(Nothing))

            Dim description = kWHTMLElementInputText.CreateDirect(Me, "Description", Nothing)
            description.LabelString = "Description"
            description.ClassName = "form-control"

            Dim dataType = kWHTMLElementInputSelect.CreateDirect(Me, 6, "DataType", MeasurmentUnit())
            dataType.LabelString = "Data Type"

            Dim Interval = kWHTMLElementInputSelect.CreateDirect(Me, 15, "Interval", IntervalVal)
            Interval.LabelString = "Interval"
            Interval.NothingInclude = False
            Interval.SortOptions = False

            Dim IntervalTimeRepresents = kWHTMLElementInputSelect.CreateDirect(Me, 1, "IntervalTimeRepresents", GetIntervalTime)
            IntervalTimeRepresents.LabelString = "Interval Time Represents"
            IntervalTimeRepresents.NothingInclude = False

            Dim IntTimeZone = kWHTMLElementInputSelect.CreateDirect(Me, ParentTimeZone(), "IntTimeZone", Zone)
            IntTimeZone.NothingInclude = False
            IntTimeZone.LabelString = "Time Zone"

            Dim AddDataCombinedStructure = kWHTMLElementButton.Create(Me, "Add datCombinedStructure")
            AddDataCombinedStructure.onClickEvent.onBeforeTriggerFunctionName = "BeforeAddClick"
            AddDataCombinedStructure.onClickEvent.eventDelegate = Function(c) c.AddItem(Nothing)
            AddDataCombinedStructure.onClickEvent.onAfterTriggerFunctionName = "AfterAddClick"

            AddDataCombinedStructure.ID = "AddDataCombinedStructure"
            AddDataCombinedStructure.ClassName = "btn btn-primary btn-md"

            Dim ChkOpenItemCheckbox = kWHTMLElementInputCheckBox.CreateDirect(Me, False, "OpenItem")
            ChkOpenItemCheckbox.LabelString = "Open Item"
            ChkOpenItemCheckbox.placeholder = String.Empty

            Form.FormSectionMain.Add(description)
            Form.FormSectionMain.Add(dataType)
            Form.FormSectionMain.Add(Interval)
            Form.FormSectionMain.Add(IntervalTimeRepresents)
            Form.FormSectionMain.Add(IntTimeZone)
            Form.FormSectionMain.Add(AddDataCombinedStructure)
            Form.FormSectionMain.Add(ChkOpenItemCheckbox)
            Return Form
        End Function


        Public Function ParentTimeZone()
            Dim timezone
            Select Case Reference.ClassType
                Case 6  'Site
                    timezone = Reference.TimeZone
                Case Else
                    timezone = 600
            End Select
            Return timezone

        End Function


        Public Function Reference()

            Dim GetReference = Nothing
            If Len(Me.SetUpObject.ClassObject.ReferenceIDs) > 0 Then
                GetReference = Me.User.Get_Item_Object(Me.SetUpObject.ClassObject.ReferenceIDs).ClassObject
            End If
            Return GetReference
        End Function
        Public Function GetReference()

            Dim Referenceid = ""
            If Len(Me.SetUpObject.ClassObject.ReferenceIDs) > 0 Then
                Referenceid = Me.SetUpObject.ClassObject.ReferenceIDs
            End If
            Return Referenceid
        End Function

        Public ReadOnly Property GetIntervalTime As List(Of kWHTMLElementInputSelect.SelectOption)
            Get
                Dim _Units As New List(Of kWHTMLElementInputSelect.SelectOption)
                Dim list = (GetType(datIntervalRepresents)).GetFields()
                For Each Itm In list
                    If Itm.Name <> "value__" Then
                        _Units.Add(New kWHTMLElementInputSelect.SelectOption With {.id = Itm.GetRawConstantValue, .text = Itm.GetRawConstantValue() & "_" & Itm.Name})
                    End If
                Next
                Return _Units
            End Get
        End Property
        Public ReadOnly Property MeasurmentUnit As List(Of kWHTMLElementInputSelect.SelectOption)
            Get

                Dim _Units As New List(Of kWHTMLElementInputSelect.SelectOption)
                Dim list = (GetType(metMeasurmentUnit)).GetFields()
                For Each Itm In list
                    If Itm.Name <> "value__" Then
                        _Units.Add(New kWHTMLElementInputSelect.SelectOption With {.id = Itm.GetRawConstantValue, .text = Itm.GetRawConstantValue() & "_" & Itm.Name})
                    End If
                Next
                Return _Units
            End Get
        End Property
        Public Function GetAddProcedure()
            'Use this procedure to get the add command procedure that is used to add items of this type to the SQL server
            Return Me.Bank.AddCommandProcedure
        End Function

        Public Function IntervalVal() As List(Of kWHTMLElementInputSelect.SelectOption)
            Dim options As New List(Of kWHTMLElementInputSelect.SelectOption)
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "1", .text = "1"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "2", .text = "2"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "5", .text = "5 "})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "10", .text = "10"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "15", .text = "15"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "30", .text = "30"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "60", .text = "60"})

            Return options
        End Function

        Public Function Zone() As List(Of kWHTMLElementInputSelect.SelectOption)
            Dim options As New List(Of kWHTMLElementInputSelect.SelectOption)
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "0", .text = "None"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "600", .text = "Vic-NSW-Qld-Tas-Act "})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "570", .text = "SA"})
            options.Add(New kWHTMLElementInputSelect.SelectOption With {.id = "480", .text = "WA"})
            Return options
        End Function

        Public Function AddItem(info As kWControlEventInfo) As kWControlEventReturnInfo
            Try
                Dim Description As String = info.userObject.Description
                Dim DataType As String = info.userObject.DataType
                Dim Interval As Integer = info.userObject.Interval
                Dim IntervalTime As String = info.userObject.IntervalTime
                Dim TimeZone As String = info.userObject.TimeZone
                Dim ErrMessage As StringBuilder = CheckValidation(Description)

                If Not String.IsNullOrEmpty(ErrMessage.ToString) Then
                    Return New kWControlEventReturnInfo With {.success = False, .returnMessage = ErrMessage.ToString}
                End If

                Dim refid = GetReference()
                Dim CombinedReport As datCombinedStructureSetUp = Me.User.Banks(CStr(utlClassType.utlClassTypedatCombinedStructure_Bank)).SetUpObject
                Dim combreport = CombinedReport.Add(refid, Description, DataType, Interval, IntervalTime, Me.User.Contact.ID)



                Dim ReportInfo As Object = New Dynamic.ExpandoObject
                ReportInfo.targetReportGuid = CType(combreport.Reports_Definitions.Item_By_Name("LOCALHTML_" & TypeName(combreport)).ClassObject, defRun_Report_Definition).RunReportGUID ' "43567d47-b760-4c5a-b527-b9b702540a19"
                ReportInfo.targetReportPropertiesGuid = Nothing '"{}"

                Return New kWControlEventReturnInfo With {.success = True, .returnData = ReportInfo, .returnMessage = "Data Structure Has Been Added Successfully"}
            Catch ex As Exception
                Return New kWControlEventReturnInfo With {.success = False, .returnMessage = ex.ToString}
            End Try

        End Function

        Function ValidateSpecialCharacters(stringname As String) As Boolean
            Dim result As Boolean = False
            result = stringname.IndexOfAny("[~`!@#$%^&*()-+=|{}':;.,<>/?]".ToCharArray) <> -1
            Return result
        End Function

        Public Function CheckValidation(Description As String) As StringBuilder
            Dim errMsg As New StringBuilder

            If Description.Length <= 0 Then
                errMsg.AppendLine("Please Enter Description For The Data Structure</br>")
            End If
            Return errMsg

        End Function

        ''' <summary>
        ''' This is the function that is called when you need to refresh the form base object
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function RefreshFormBase() As String Implements WebForm.RefreshFormBase

            'Get the report
            Dim repBase As HTMLkWFormBase(Of WEBHTMLADD_kWItems) = GetReportBase()
            'This will exclude the jscript code and other items
            repBase.RefreshPageCall = True
            Dim html As New HTMLTextWriterkWatch
            repBase.ToString(html)
            'Return the string that contains the main contents of this report with extras
            Return html.ToString

        End Function



#Region "Default Code"
        Public Function IsReady()


            'If Len(Description.Value) = 0 Then
            '    problem = problem & "Please enter Description for the" Me.Bank.Child_ClassName
            'End If

            'If Interval.Value = 0 Then

            '    problem = problem & "You must select an interval for the [me.Bank.Child_ClassName]" & vbCrLf
            'End If


            'If IntervalTimeRepresents.Value = 0 Then

            '    problem = problem & "Please select an Interval time [me.Bank.Child_ClassName]" & vbCrLf

            'End If

        End Function

        <ThreadStatic()>
        Public Shared SharedMe As WEBHTMLADD_kWItems

        'Private _Entities As Entities
        '''' <summary>
        '''' This should only be used when updating properties, not in any other code - when you need the entities you should
        '''' create it yourself
        '''' </summary>
        '''' <value></value>
        '''' <returns></returns>
        '''' <remarks></remarks>
        'Public ReadOnly Property Entities As Entities
        '    Get
        '        If Not _Entities Is Nothing Then
        '            If _Entities.IsDisposed Then
        '                _Entities = Nothing
        '            End If
        '        End If
        '        If _Entities Is Nothing Then
        '            _Entities = New Entities(Me.User)
        '        End If

        '        Return _Entities
        '    End Get
        'End Property

        ''' <summary>
        ''' This can be used to associate an icon with this report that is different to the underlying report
        ''' You could set this within the SetDefaults, or you could create a get and set componet of the 
        ''' property and override it
        ''' </summary>
        ''' <returns></returns>
        Public Property ReportIcon As Icons Implements WebForm.ReportIcon

        ''' <summary>
        ''' Initialization code in here for this report.  This code will be called each time the report is ran
        ''' other call reports should also call this before using the report output or any contained functions
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub SetDefaults() Implements defReport_Definitions.defReportDefinitionBase.SetDefaults

            If Len(ItemReferance1) = 0 Then ItemReferance1 = "User.Get_Item_Object(""" & Report.LongID & """, True).ClassObject.Object"
            HasWindow = False
            'Uncomment these lines if you have an entitites object
            'If Not _Entities Is Nothing Then
            '    _Entities.Dispose()
            '    _Entities = Nothing
            'End If

            SharedMe = Me
        End Sub

        ''' <summary>
        ''' This is a callback that is called after the report if produced.  The report is a document of type Word, Excel, Email or RTF
        ''' This depends on the type of report produced
        ''' </summary>
        ''' <param name="ReportObj">The Report object</param>
        ''' <remarks></remarks>
        Public Sub AfterReportProduce(ByVal ReportObj As Object) Implements defReport_Definitions.defReportDefinitionBase.AfterReportProduce
        End Sub

        ''' <summary>
        ''' The callback is called after the file has been saved to kWatch.  The file object is a referances to the filFile object that has 
        ''' just been saved
        ''' </summary>
        ''' <param name="File">The newly saved file</param>
        ''' <remarks></remarks>
        Public Sub AfterFileSave(ByVal File As kWatchServer.filFile) Implements defReport_Definitions.defReportDefinitionBase.AfterFileSave
        End Sub


        ''' <summary>
        ''' This is the web request object that has been passed back from the originating call. This contains
        ''' information relating to the browser, the call been made and the IIS server that the call came from.
        ''' This is a copy of the request object that is generated by the server 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property Request As UserRequest Implements WebForm.Request

        ''' <summary>
        ''' This is the WebSite that this request belongs to
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property Web As webWebSite Implements WebForm.Web

        ''' <summary>
        ''' This is the webContact that relatest to this request
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property WebContact As webContactLogin Implements WebForm.WebContact

#Region "Settings"

        ''' <summary>
        ''' This will return the settings object as a dynamic expando object that you can review and edit.  If you
        ''' want your settings object casted to a specific type, use the GetSettings function.  Setting an object
        ''' to this location will also update the settings object for you as well
        ''' 
        ''' This will get the settings object for this report object.  Settings objects are unique based on
        ''' the RunReportID, LoggedInContact (either web or local), The active WebID or web site, a DashboardwidgetID and
        ''' optionaly a SettingsLocationID that you might choose to use.
        ''' 
        ''' So for a kWatch report delivered within kWatch - this would be unique based on RunReportID and contactID only as
        ''' webID, DashboardwidgetID and SettinglocationID are all nothing
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Property Settings As Object Implements WebForm.Settings
            Get
                Return WebManagement.SettingsManagement.GetSettings(Me) ' Newtonsoft.Json.JsonConvert.DeserializeObject(Of ExpandoObject)(Me.SettingsRecord.SettingsObject)
            End Get
            Set(value As Object)
                WebManagement.SettingsManagement.SaveSettings(value, Me)
            End Set
        End Property

        ''' <summary>
        ''' This will return the settings object as a dynamic expando object that you can review and edit.  If you
        ''' want your settings object casted to a specific type, use the GetSettings function.  Setting an object
        ''' to this location will also update the settings object for you as well
        ''' 
        ''' This will get the settings object for this report object.  Settings objects are unique based on
        ''' the RunReportID, LoggedInContact (either web or local), The active WebID or web site, a DashboardwidgetID and
        ''' optionaly a SettingsLocationID that you might choose to use.
        ''' 
        ''' So for a kWatch report delivered within kWatch - this would be unique based on RunReportID and contactID only as
        ''' webID, DashboardwidgetID and SettinglocationID are all nothing
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSettings(Of SettingObjectType)() As SettingObjectType Implements WebForm.GetSettings

            Return WebManagement.SettingsManagement.GetSettings(Of SettingObjectType)(Me)

        End Function

        ''' <summary>
        ''' This will save the settings object to the database
        ''' </summary>
        ''' <typeparam name="SettingObjectType"></typeparam>
        ''' <param name="Obj"></param>
        ''' <remarks></remarks>
        Public Sub SaveSettings(Of SettingObjectType)(Obj As SettingObjectType) Implements WebForm.SaveSettings

            WebManagement.SettingsManagement.SaveSettings(Obj, Me)

        End Sub

        ''' <summary>
        ''' This is a global property that if set - will be used as a reportProperties object by the dash-board component
        ''' You do not need to set this - and it is set if this report is used as 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <kWHTML.kWForms.reportProperty>
        Public Property DashboardWidgetID As Integer? Implements WebForm.DashboardWidgetID
        ''' <summary>
        ''' This will get the settings record for this report object.  Settings objects are created and unique based on
        ''' the RunReportID, LoggedInContact (either web or local), The active WebID or web site, a dash-board Widget ID and
        ''' optionaly a SettingsLocationID that you might choose to use.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SettingsRecord As defReportSetting Implements WebForm.SettingsRecord
            Get
                Return WebManagement.SettingsManagement.GetSettingsRecord(Me)
            End Get
        End Property


        ''' <summary>
        ''' This will return the guid that is used within the report object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property ReportPropertiesGuid As Guid Implements WebForm.ReportPropertiesGuid
            Get
                Return WebManagement.SettingsManagement.getReportPropertiesGuid(Me)
            End Get
        End Property

        ''' <summary>
        ''' This wil return the report properties object for this report
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property ReportProperties As Object Implements WebForm.ReportProperties
            Get
                Return WebManagement.SettingsManagement.GetReportProperties(Me)
            End Get
        End Property
#End Region

#End Region

    End Class
End Namespace
